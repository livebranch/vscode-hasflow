{
	"scopeName": "cel-expression.injection",
	"injectionSelector": "L:source",
	"patterns": [
		{
			"include": "#cel-unquoted-name-value-pair"
		},
		{
			"include": "#cel-empty-quoted-name-value-pair"
		},
		{
			"include": "#cel-quoted-name-value-pair"
		},
		{
			"include": "#cel-empty-single-quoted-name-value-pair"
		},
		{
			"include": "#cel-single-quoted-name-value-pair"
		},
		{
			"include": "#cel-multiline-name-value-pair"
		},
		{
			"include": "#cel-multiline-name-value-pair-unescaped"
		}
	],
	"repository": {
		"cel-unquoted-name-value-pair": {
			"begin": "^\\s*[-]?\\s*(:)([a-zA-Z_][0-9a-zA-Z_]*)([\\?\\!]?)(:)\\s+(?=[^\"'>])",
			"beginCaptures": {
				"1": { "name": "keyword.control" },
				"2": { "name": "variable.other.property" },
			  "3": { "name": "keyword.control" },
				"4": { "name": "punctuation.separator.key-value.mapping.yaml" }
			},
			"end": "(?=($))",
			"endCaptures": {
			},
			"patterns": [
				{
					"include": "source.cel"
				}
			]
		},
		"cel-empty-quoted-name-value-pair": {
			"begin": "^\\s*[-]?\\s*(:)([a-zA-Z_][0-9a-zA-Z_]*)([\\?\\!]?)(:)\\s+(\"'')",
			"beginCaptures": {
				"1": { "name": "keyword.control" },
				"2": { "name": "variable.other.property" },
			  "3": { "name": "keyword.control" },
				"4": { "name": "punctuation.separator.key-value.mapping.yaml" },
				"5": { "name": "string.quoted.double.start" }
			},
			"end": "(\")",
			"endCaptures": {
			  "1": { "name": "string.quoted.double.end" }
			},
			"patterns": [
			]
		},
		"cel-quoted-name-value-pair": {
			"begin": "^\\s*[-]?\\s*(:)([a-zA-Z_][0-9a-zA-Z_]*)([\\?\\!]?)(:)\\s+(\")",
			"beginCaptures": {
				"1": { "name": "keyword.control" },
				"2": { "name": "variable.other.property" },
			  "3": { "name": "keyword.control" },
				"4": { "name": "punctuation.separator.key-value.mapping.yaml" },
				"5": { "name": "string.quoted.double.start" }
			},
			"end": "(\")",
			"endCaptures": {
			  "1": { "name": "string.quoted.double.end" }
			},
			"patterns": [
				{
					"include": "source.cel"
				}
			]
		},
		"cel-empty-single-quoted-name-value-pair": {
			"begin": "^\\s*[-]?\\s*(:)([a-zA-Z_][0-9a-zA-Z_]*)([\\?\\!]?)(:)\\s+('\"\")",
			"beginCaptures": {
				"1": { "name": "keyword.control" },
				"2": { "name": "variable.other.property" },
			  "3": { "name": "keyword.control" },
				"4": { "name": "punctuation.separator.key-value.mapping.yaml" },
				"5": { "name": "string.quoted.double.start" }
			},
			"end": "(')",
			"endCaptures": {
			  "1": { "name": "string.quoted.double.end" }
			},
			"patterns": [
			]
		},
		"cel-single-quoted-name-value-pair": {
			"begin": "^\\s*(:)([a-zA-Z_][0-9a-zA-Z_]*)([\\?\\!]?)(:)\\s+(')",
			"beginCaptures": {
				"1": { "name": "keyword.control" },
				"2": { "name": "variable.other.property" },
			  "3": { "name": "keyword.control" },
				"4": { "name": "punctuation.separator.key-value.mapping.yaml" },
				"5": { "name": "string.quoted.single.start" }
			},
			"end": "(')",
			"endCaptures": {
			  "1": { "name": "string.quoted.single.end" }
			},
			"patterns": [
				{
					"include": "source.cel"
				}
			]
		},
		"cel-multiline-name-value-pair": {
			"begin": "^\\s*[-]?\\s*(:)([a-zA-Z_][0-9a-zA-Z_]*)([\\?\\!]?)(:)\\s+>$",
			"beginCaptures": {
			  "1": { "name": "keyword.control" },
			  "2": { "name": "variable.other.property" },
			  "3": { "name": "keyword.control" },
			  "4": { "name": "punctuation.separator.key-value.mapping.yaml" }
			},
			"end": "(?=(\\s*[a-zA-Z0-9_]+:(\\s|$)|\\s*[a-zA-Z0-9_]+:|\\s*#.+))",
			"endCaptures": {
			},
			"patterns": [
				{
					"name": "hasflow.cel-multiline-name-value-pair",
					"include": "source.cel"
				}
			]
		},
		"cel-multiline-name-value-pair-unescaped": 				{
			"begin": "(?x)\n                        (?=\n                            (?x:\n                                  [^\\s[-?:,\\[\\]{}#&*!|>'\"%@`]]\n                                | [?:-] \\S\n                            )\n                            (\n                                  [^\\s:]\n                                | : \\S\n                                | \\s+ (?![#\\s])\n                            )*\n                            \\s*\n                            :\\s\n                        )\n                    ",
			"end": "(?x)\n                        (?=\n                              \\s* $\n                            | \\s+ \\#\n                            | \\s* : \\s\n                        )\n                    ",
			"patterns": [
				{
					"begin": "(?x)\n                                  :[^\\s[-?:,\\[\\]{}#&*!|>'\"%@`]]\n                                | :[?:-] \\S\n                            ",
					"beginCaptures": {
						"0": {
							"name": "entity.name.tag.yaml"
						}
					},
					"contentName": "entity.name.tag.yaml",
					"end": "(?x)\n                                (?=\n                                      \\s* $\n                                    | \\s+ \\#\n                                    | \\s* : \\s\n                                )\n                            ",
					"name": "string.unquoted.plain.out.yaml",
					"patterns": [
						{
							"name": "hasflow.cel-multiline-name-value-pair",
							"include": "source.cel"
						}
					]
				}
			]
		}
	}
}